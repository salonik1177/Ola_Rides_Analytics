<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="ola_rides.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3273"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="0" parent="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="rides" custom_title="0" dock_id="1" table="4,5:mainrides"/><dock_state state="000000ff00000000fd0000000100000002000005f4000002aefc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005f40000013900ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="rides" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="109"/><column index="2" value="163"/><column index="3" value="78"/><column index="4" value="93"/><column index="5" value="163"/><column index="6" value="163"/><column index="7" value="70"/><column index="8" value="83"/><column index="9" value="300"/><column index="10" value="280"/><column index="11" value="98"/><column index="12" value="140"/><column index="13" value="90"/><column index="14" value="106"/><column index="15" value="83"/><column index="16" value="81"/><column index="18" value="300"/><column index="19" value="132"/><column index="20" value="82"/><column index="21" value="76"/><column index="22" value="79"/><column index="23" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Table Structure*">DROP TABLE IF EXISTS rides;

CREATE TABLE rides (
    booking_id TEXT PRIMARY KEY,
    booking_status TEXT,
    customer_id TEXT,
    vehicle_type TEXT,
    pickup_location TEXT,
    drop_location TEXT,
    vendor_tat REAL,
    customer_tat REAL,
    cancelled_by_customer_reason TEXT,
    cancelled_by_driver_reason TEXT,
    incomplete_flag TEXT,
    incomplete_reason TEXT,
    booking_value REAL,
    payment_method TEXT,
    ride_distance REAL,
    driver_rating REAL,
    customer_rating REAL,
    vehicle_image TEXT,
    booking_time TIMESTAMP,
    is_completed INTEGER,
    is_cancelled INTEGER,
    hour_of_day INTEGER,
    weekday TEXT
);
</sql><sql name="SQL 3*">-- 1. Retrieve all successful bookings
SELECT *
FROM rides
WHERE booking_status = 'Success';</sql><sql name="SQL 4*">-- 2. Find the average ride distance for each vehicle type
SELECT vehicle_type,
       ROUND(AVG(ride_distance), 2) AS avg_distance
FROM rides
GROUP BY vehicle_type
ORDER BY avg_distance DESC;</sql><sql name="SQL 5*">-- 3. Get the total number of rides cancelled by customers
SELECT COUNT(*) AS cancelled_by_customers
FROM rides
WHERE booking_status = 'Canceled by Customer';
</sql><sql name="SQL 6*">-- 4. Find the top 5 customers who booked the highest number of rides
SELECT customer_id,
       COUNT(*) AS ride_count
FROM rides
GROUP BY customer_id
ORDER BY ride_count DESC
LIMIT 5;</sql><sql name="SQL 7*">-- 5. Calculate the number of rides cancelled by drivers due to personal or car issues
SELECT COUNT(*) AS driver_cancel_personal_car
FROM rides
WHERE booking_status = 'Canceled by Driver'
  AND cancelled_by_driver_reason LIKE '%Personal &amp; Car related issue%';</sql><sql name="SQL 8*">-- 6. Find the maximum and minimum driver ratings for Prime Sedan bookings
SELECT MAX(driver_rating) AS max_rating,
       MIN(driver_rating) AS min_rating
FROM rides
WHERE vehicle_type = 'Prime Sedan'
  AND driver_rating IS NOT NULL;</sql><sql name="SQL 9*">-- 7. Retrieve all rides where payment was made using UPI
SELECT *
FROM rides
WHERE payment_method = 'UPI';</sql><sql name="SQL 10*">-- 8. Calculate the average customer rating for each vehicle type
SELECT vehicle_type,
       ROUND(AVG(customer_rating), 2) AS avg_customer_rating
FROM rides
WHERE customer_rating IS NOT NULL
GROUP BY vehicle_type
ORDER BY avg_customer_rating DESC;</sql><sql name="SQL 11*">-- 9. Find the total booking value of rides completed successfully
SELECT SUM(booking_value) AS total_success_booking_value
FROM rides
WHERE booking_status = 'Success';
</sql><sql name="SQL 12*">-- 10. List all incomplete rides along with the reason
SELECT booking_id,
       customer_id,
       booking_time,
       incomplete_flag,
       incomplete_reason
FROM rides
WHERE incomplete_flag = 'Yes' OR incomplete_reason IS NOT NULL;</sql><current_tab id="10"/></tab_sql></sqlb_project>
